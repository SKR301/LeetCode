class Solution {
public:
    bool closeStrings(string word1, string word2) {
        if(word1.length()!=word2.length()){
            return false;
        }
        
        int size = word1.length();

        unordered_map<char,int> map1word1;
        unordered_map<char,int> map1word2;

        for(int a=0;a<size;a++){
            map1word1[word1[a]]++;
            map1word2[word2[a]]++;
        }
        
        unordered_map<char,int> map2word1;
        unordered_map<char,int> map2word2;
    
        for(unordered_map<char,int>::iterator it = map1word1.begin();it!=map1word1.end();it++){
            if(map1word2.find(it->first) == map1word2.end()){
                return false;
            }
            map2word1[it->second]++;
        }
        
        for(unordered_map<char,int>::iterator it = map1word2.begin();it!=map1word2.end();it++){
            if(map1word1.find(it->first) == map1word1.end()){
                return false;
            }
            map2word2[it->second]++;
        }   

        for(unordered_map<char,int>::iterator it = map2word1.begin();it!=map2word1.end();it++){
            if(map2word2.find(it->first) == map2word2.end()){
                return false;
            }
            if(map2word2[it->first] != it->second){
                return false;
            }
        }
        
        for(unordered_map<char,int>::iterator it = map2word2.begin();it!=map2word2.end();it++){
            if(map2word1.find(it->first) == map2word1.end()){
                return false;
            }
        }



        return true;
    }
};
